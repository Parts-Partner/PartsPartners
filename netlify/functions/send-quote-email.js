// netlify/functions/send-quote-email.js
const nodemailer = require('nodemailer');

exports.handler = async (event, context) => {
  // Only allow POST requests
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      body: JSON.stringify({ error: 'Method not allowed' }),
    };
  }

  try {
    const { formData, csvContent, pdfContent, quoteNumber, timestamp } = JSON.parse(event.body);

    // Email configuration using environment variables
    const transporter = nodemailer.createTransporter({
      service: 'gmail',
      auth: {
        user: process.env.EMAIL_USER, // Your Gmail address
        pass: process.env.EMAIL_PASS, // Your Gmail App Password
      },
    });

    // Create email content
    const emailSubject = `New Quote Request from ${formData.customer_name} - ${quoteNumber}`;
    
    const emailHtml = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="background: linear-gradient(135deg, #2563eb 0%, #1d4ed8 100%); color: white; padding: 20px; border-radius: 8px 8px 0 0;">
          <h2 style="margin: 0; font-size: 24px;">New Quote Request</h2>
          <p style="margin: 5px 0 0 0; opacity: 0.9;">Quote Number: ${quoteNumber}</p>
        </div>
        
        <div style="background: #f8fafc; padding: 20px; border-radius: 0 0 8px 8px;">
          <h3 style="color: #1e293b; margin-top: 0;">Customer Information</h3>
          <table style="width: 100%; border-collapse: collapse;">
            <tr style="background: white;">
              <td style="padding: 12px; border: 1px solid #e2e8f0; font-weight: bold; color: #475569;">Name:</td>
              <td style="padding: 12px; border: 1px solid #e2e8f0; color: #1e293b;">${formData.customer_name}</td>
            </tr>
            <tr style="background: #f1f5f9;">
              <td style="padding: 12px; border: 1px solid #e2e8f0; font-weight: bold; color: #475569;">Company:</td>
              <td style="padding: 12px; border: 1px solid #e2e8f0; color: #1e293b;">${formData.company_name || 'Not provided'}</td>
            </tr>
            <tr style="background: white;">
              <td style="padding: 12px; border: 1px solid #e2e8f0; font-weight: bold; color: #475569;">Email:</td>
              <td style="padding: 12px; border: 1px solid #e2e8f0; color: #1e293b;">${formData.email}</td>
            </tr>
            <tr style="background: #f1f5f9;">
              <td style="padding: 12px; border: 1px solid #e2e8f0; font-weight: bold; color: #475569;">Phone:</td>
              <td style="padding: 12px; border: 1px solid #e2e8f0; color: #1e293b;">${formData.phone || 'Not provided'}</td>
            </tr>
          </table>
          
          ${formData.notes ? `
            <h3 style="color: #1e293b; margin-top: 20px;">Additional Notes</h3>
            <div style="background: white; padding: 15px; border-radius: 6px; border-left: 4px solid #2563eb;">
              <p style="margin: 0; color: #475569; line-height: 1.5;">${formData.notes}</p>
            </div>
          ` : ''}
          
          <div style="margin-top: 20px; padding: 15px; background: #dbeafe; border-radius: 6px; border-left: 4px solid #3b82f6;">
            <h4 style="margin: 0 0 10px 0; color: #1e40af;">Attachments</h4>
            <ul style="margin: 0; padding-left: 20px; color: #1e40af;">
              <li>Quote Details (CSV format)</li>
              <li>Professional Quote (PDF format)</li>
            </ul>
          </div>
        </div>
        
        <div style="text-align: center; margin-top: 20px; padding: 15px; background: #f8fafc; border-radius: 6px;">
          <p style="margin: 0; color: #64748b; font-size: 14px;">
            This email was automatically generated by your OEM Parts system
          </p>
        </div>
      </div>
    `;

    // Send email with attachments
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: 'Tbanschb@gmail.com',
      subject: emailSubject,
      html: emailHtml,
      attachments: [
        {
          filename: `quote_${quoteNumber}_${timestamp}.csv`,
          content: csvContent,
          encoding: 'base64',
          contentType: 'text/csv'
        },
        {
          filename: `quote_${quoteNumber}_${timestamp}.pdf`,
          content: pdfContent,
          encoding: 'base64',
          contentType: 'text/html'
        }
      ]
    };

    await transporter.sendMail(mailOptions);

    return {
      statusCode: 200,
      body: JSON.stringify({
        success: true,
        message: 'Quote email sent successfully',
        quoteNumber: quoteNumber
      }),
    };

  } catch (error) {
    console.error('Error sending email:', error);
    return {
      statusCode: 500,
      body: JSON.stringify({
        error: 'Failed to send email',
        details: error.message
      }),
    };
  }
};